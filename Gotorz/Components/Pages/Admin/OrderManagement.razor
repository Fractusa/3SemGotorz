@page "/admin/order-management"
@rendermode InteractiveServer
@using Gotorz.Data
@using Gotorz.Services
@using Gotorz.Models
@using Microsoft.EntityFrameworkCore
@inject AuthStateService authState
@inject NavigationManager navigation
@inject ApplicationDbContext db

<h3>Order Management</h3>

@if(!authState.IsLoggedIn! || authState.UserRole != "Admin")
{
    <p>Redirecting</p>
}
else
{
    <div class="filters mb-3">
        <label>Date from: <input type="date" @bind="filterFrom" /></label>
        <label>Date to: <input type="date" @bind="filterTo" /></label>
        <label>User Email: <input type="text" @bind="filterEmail" placeholder="Enter user email"/></label>
        <button class="btn btn-primary" @onclick="Filter">Apply</button>
    </div>
}
@if(filteredBookings == null)
{
    <p>Loading</p>
}
else
{
    <table class="table table-sm small">
        <thead>
            <tr>
                <th>User email</th>
                <th>Booking id</th>
                <th>Departure flight id</th>
                <th>Departure takeoff time</th>
                <th>Departure landing time</th>
                <th>Return flight id</th>
                <th>Return takeoff time</th>
                <th>Return landing time</th>
                <th>Hotel</th>
                <th>Hotel id</th>
                <th>Hotel checkin time</th>
                <th>Hotel checkout time</th>
                <th>Booking creation time</th>
                <th>Departure flight price</th>
                <th>Return flight price</th>
                <th>Hotel price</th>
                <th>Total price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in filteredBookings)
            {
                <tr>
                    <td>@booking.UserEmail</td>
                    <td>@booking.Id</td>
                    <td>@booking.DepartureFlightId</td>
                    <td>@booking.TakeoffTimeDepartureFlight.ToString("f")</td>
                    <td>@booking.LandingTimeDepartureFlight.ToString("f")</td>
                    <td>@booking.ReturnFlightId</td>
                    <td>@booking.TakeoffTimeReturnFlight.ToString("f")</td>
                    <td>@booking.LandingTimeReturnFlight.ToString("f")</td>
                    <td>@booking.HotelName</td>
                    <td>@booking.HotelId</td>
                    <td>@booking.HotelCheckIn.ToString("f")</td>
                    <td>@booking.HotelCheckOut.ToString("f")</td>
                    <td>@booking.CreationDate.ToString("f")</td>
                    <td>@booking.DeparturePriceAtCreation.ToString("N2") DKK</td>
                    <td>@booking.ReturnPriceAtCreation.ToString("N2") DKK</td>
                    <td>@booking.HotelPriceAtCreation.ToString("N2") DKK</td>
                    <td>@booking.TotalPrice.ToString("N2") DKK</td>
                </tr>
            }
        </tbody>
    </table>
}
<button @onclick=AdminPanelRedirect>Back</button>


@code {
    private List<Booking> allBookings;
    private List<Booking> filteredBookings;

    private string filterEmail = string.Empty;
    private DateTime? filterFrom;
    private DateTime? filterTo;
    private string filterStatus = "";

    protected override async Task OnInitializedAsync()
    {
        allBookings = await db.Bookings.ToListAsync();
        filteredBookings = allBookings;
    }

    private void Filter()
    {
        //applies the given filter inputs to the search on the order table in the database and creates a list with the orders that
        //matches the given search inputs
        filteredBookings = allBookings
        .Where(b =>
        (!filterFrom.HasValue || b.CreationDate >= filterFrom.Value) &&
        (!filterTo.HasValue || b.CreationDate <= filterTo.Value) &&
        (string.IsNullOrWhiteSpace(filterEmail) || b.UserEmail.Contains(filterEmail, StringComparison.OrdinalIgnoreCase)))
        .ToList();
    }
    //Checks whether the user should be redirected to the login page or not, after the page is rendered.
    private bool redirectChecked = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!redirectChecked)
        {
            redirectChecked = true;

            //If the user isn't logged in or does not have the required role, redirect the user to the login page.
            if (!authState.IsLoggedIn || (authState.UserRole != "Admin"))
            {
                navigation.NavigateTo("/login", true);
            }
        }
    }
    private void AdminPanelRedirect()
    {
        navigation.NavigateTo("/admin");
    }
}
