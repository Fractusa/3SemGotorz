@page "/register"
@rendermode InteractiveServer
@using Gotorz.Models
@using Gotorz.Data
@using System.ComponentModel.DataAnnotations
@using System
@inject ApplicationDbContext db



<EditForm Model="@registerModel" OnValidSubmit="@ValidRegisterSubmit" FormName="registerForm">
    <DataAnnotationsValidator />
    <div class="container">
        <h3>Registration</h3>


        <label>First name:</label>
        <InputText @bind-value="registerModel.FirstName"/>
        <ValidationMessage For="@(() => registerModel.FirstName)" />

        <label>Last name:</label>
        <InputText @bind-value="registerModel.LastName" />
        <ValidationMessage For="@(() => registerModel.LastName)" />

        <label>Email: </label>
        <InputText @bind-value="registerModel.Email" />
        <ValidationMessage For="@(() => registerModel.Email)" />

        <label>Password: </label>
        <InputText @bind-value="registerModel.Password" type="password"/>
        <ValidationMessage For="@(() => registerModel.Password)" />

        <label>Phone number: </label>
        <InputText @bind-value="registerModel.PhoneNumber" />
        <ValidationMessage For="@(() => registerModel.PhoneNumber)" />

        <button type="submit"> Register</button>

        <p>Already have an account? <a href="/login"> Login</a></p>

        @if (!string.IsNullOrEmpty(alertMessage))
        {
            <p style="color:green">@alertMessage</p>
        }



    </div>
</EditForm>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string alertMessage;


    private async Task ValidRegisterSubmit()
    {
        var context = new ValidationContext(registerModel);


        // Simulate success
        alertMessage = "Registration successful!";

     

        // TODO: Save to database or call API here
        db.Users.Add(registerModel);
        await db.SaveChangesAsync();

        // Reset form
        registerModel = new RegisterModel();

    }
}
