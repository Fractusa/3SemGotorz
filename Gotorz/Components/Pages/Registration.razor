@page "/register"
@rendermode InteractiveServer
@using Gotorz.Models
@using Gotorz.Data
@using System.ComponentModel.DataAnnotations
@using System
@using Microsoft.AspNetCore.Identity
@inject ApplicationDbContext db



<EditForm Model="@registerModel" OnValidSubmit="@ValidRegisterSubmit" FormName="registerForm">
    <DataAnnotationsValidator />
    <div class="container">
        <h3>Registration</h3>


        <div class="form-field-inline">
            <label for="firstName">First name:</label>
            <div class="input-area">
                <InputText id="firstName" @bind-value="registerModel.FirstName" class="form-control" />
                <ValidationMessage For="@(() => registerModel.FirstName)" />
            </div>
        </div>

        <div class="form-field-inline">
            <label for="lastName">Last name:</label>
            <div class="input-area">
                <InputText id="lastName" @bind-value="registerModel.LastName" class="form-control" />
                <ValidationMessage For="@(() => registerModel.LastName)" />
            </div>
        </div>


        <div class="form-field-inline">
            <label for="email">Email:</label>
            <div class="input-area">
                <InputText id="email" @bind-value="registerModel.Email" class="form-control" />
                <ValidationMessage For="@(() => registerModel.Email)" />
            </div>
        </div>

        <div class="form-field-inline">
            <label for="password">Password:</label>
            <div class="input-area">
                <InputText id="password" @bind-value="registerModel.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => registerModel.Password)" />
            </div>
        </div>

        <div class="form-field-inline">
            <label for="phoneNumber">Phone number:</label>
            <div class="input-area">
                <InputText id="phoneNumber" @bind-value="registerModel.PhoneNumber" class="form-control" />
                <ValidationMessage For="@(() => registerModel.PhoneNumber)" />
            </div>
        </div>

        <button type="submit"> Register</button>

        <p>Already have an account? <a href="/login"> Login</a></p>

        @if (!string.IsNullOrEmpty(alertMessage))
        {
            <p style="color:green">@alertMessage</p>
        }



    </div>
</EditForm>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string alertMessage;


    private async Task ValidRegisterSubmit()
    {
        var context = new ValidationContext(registerModel);
        var hasher = new PasswordHasher<RegisterModel>();

        string hashedPassword = hasher.HashPassword(registerModel, registerModel.Password);
        registerModel.HashedPassword = hashedPassword;


        

     

        db.Users.Add(registerModel);
        await db.SaveChangesAsync();

        // Simulate success
        alertMessage = "Registration successful!";

        // Reset form
        registerModel = new RegisterModel();

    }
}
