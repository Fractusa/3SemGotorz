@page "/employee/create-travel-package"
@rendermode InteractiveServer
@using Gotorz.Models
@using Gotorz.Data
@using Gotorz.Services
@inject ApplicationDbContext db
@inject AuthStateService authState
@inject NavigationManager navigation
@inject TravelAPIService travelAPI

<h3>Create Travel Package</h3>


<EditForm Model="@templateModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-2">
        <label>Origin (Airport Code):</label>
        <InputText class="form-control" @bind-Value="templateModel.Origin" />
    </div>

    <div class="mb-2">
        <label>Destination (Airport Code):</label>
        <InputText class="form-control" @bind-Value="templateModel.Destination" />
    </div>

    <div class="mb-2">
        <label>Title:</label>
        <InputText class="form-control" @bind-Value="templateModel.Title" />
    </div>

    <div class="mb-2">
        <label>Description:</label>
        <InputTextArea class="form-control" @bind-Value="templateModel.Description" />
    </div>

    <div class="mb-2">
        <label>Select a Hotel (must search first):</label>
        <InputSelect class="form-control" @bind-Value="templateModel.HotelId">
            <option value="">-- Select a Hotel --</option>
            @foreach (var hotel in hotels)
            {
                <option value="@hotel.HotelId">@hotel.HotelName - @hotel.Price DKK</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Create Template</button>
</EditForm>

<button class="btn btn-secondary mt-3" @onclick="SearchHotels">Search Hotels</button>

@if (showSuccessMessage)
{
    <div class="alert alert-success mt-2">Template saved successfully!</div>
}

@code {
    private TravelPackageTemplate templateModel = new();
    private List<HotelData> hotels = new();
    private bool showSuccessMessage = false;

    private async Task SearchHotels()
    {
        // Use dummy dates just to fetch hotel options
        hotels = await travelAPI.GetHotelsAsync(
            templateModel.Destination ?? "LON",
            DateTime.Today.AddDays(10).ToString("yyyy-MM-dd"),
            DateTime.Today.AddDays(60).ToString("yyyy-MM-dd"),
            1);
    }

    private async Task HandleValidSubmit()
    {
        db.TravelPackageTemplates.Add(templateModel);
        await db.SaveChangesAsync();
        showSuccessMessage = true;
        templateModel = new(); // Reset form
    }

    //Checks whether the user should be redirected to the login page or not, after the page is rendered.
    private bool redirectChecked = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!redirectChecked)
        {
            redirectChecked = true;

            //If the user isn't logged in or does not have the required role, redirect the user to the login page.
            if (!authState.IsLoggedIn || ((authState.UserRole != "Admin" && authState.UserRole != "Employee")))
            {
                navigation.NavigateTo("/login", true);
            }
        }
    }

}
