@page "/employee"
@rendermode InteractiveServer
@using Gotorz.Services
@inject AuthStateService authState
@inject NavigationManager navigation
@implements IDisposable

@if (!authState.IsLoggedIn)
{
    <p>Redirecting to the login page</p>
}
else if (authState.UserRole != "Admin" && authState.UserRole != "Employee")
{
    <p>Access denied</p>
}
else
{
    <p>Welcome to the Employee panel, @authState.UserEmail</p>

    //Employee information/functionality goes here

    <button @onclick=DashboardRedirect>Dashboard</button>
    <button @onclick=CreatePackageRedirect>Create Package</button>
    <button @onclick=UserPageRedirect>Back</button>
}





@code {
    protected override void OnInitialized()
    {
        authState.OnChange += StateHasChanged;

    }


    //Checks whether the user should be redirected to the login page or not, after the page is rendered.
    private bool redirectChecked = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!redirectChecked)
        {
            redirectChecked = true;

            //If the user isn't logged in or does not have the required role, redirect the user to the login page.
            if (!authState.IsLoggedIn || (authState.UserRole != "Admin" && authState.UserRole != "Employee"))
            {
                navigation.NavigateTo("/login", true);
            }
        }
    }

    public void Dispose()
    {
        authState.OnChange -= StateHasChanged;
    }

    private void DashboardRedirect()
    {
        navigation.NavigateTo("/employee/dashboard");
    }
    private void CreatePackageRedirect()
    {
        navigation.NavigateTo("/employee/create-travel-package");
    }
    private void UserPageRedirect()
    {
        navigation.NavigateTo("/userPage");
    }
}
