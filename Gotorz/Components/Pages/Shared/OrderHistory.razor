@page "/order-history"
@rendermode InteractiveServer
@using Gotorz.Data
@using Gotorz.Services
@using Gotorz.Models
@using Microsoft.EntityFrameworkCore

@inject AuthStateService authState
@inject ApplicationDbContext db
@inject NavigationManager navigation




<h3>Your booking history</h3>


@if (!authState.IsLoggedIn)
{
    <p>Redirecting to login</p>
}
else if(bookings == null)
{
    <p>Loading your bookings</p>
}
else
{
    @if (bookings.Any())
    {
        <h3 class="mb-4">Your Bookings</h3>
        <div class="row row-cols-1 row-cols-md-2 g-4">
            @foreach (var booking in bookings)
            {
                <div class="col">
                    <div class="card shadow-sm border-0">
                        <div class="card-body">
                            <h5 class="card-title">@booking.Origin → @booking.Destination</h5>
                            <h6 class="card-subtitle mb-2 text-muted">User: @booking.UserEmail | Adults: @booking.Adults</h6>

                            <hr />

                            <p>
                                <strong>Booking id</strong> @booking.Id<br/>
                                <strong>Departure Flight:</strong> @booking.DepartureFlightId<br />
                                <strong>Takeoff:</strong> @booking.TakeoffTimeDepartureFlight.ToString("f")<br />
                                <strong>Landing:</strong> @booking.LandingTimeDepartureFlight.ToString("f")
                            </p>

                            <p>
                                <strong>Return Flight:</strong> @booking.ReturnFlightId<br />
                                <strong>Takeoff:</strong> @booking.TakeoffTimeReturnFlight.ToString("f")<br />
                                <strong>Landing:</strong> @booking.LandingTimeReturnFlight.ToString("f")
                            </p>

                            <hr />

                            <p>
                                <strong>Hotel:</strong> @booking.HotelName (ID: @booking.HotelId)<br />
                                <strong>Check-in:</strong> @booking.HotelCheckIn.ToString("f")<br />
                                <strong>Check-out:</strong> @booking.HotelCheckOut.ToString("f")
                            </p>

                            <hr />

                            <p>
                                <strong>Created On:</strong> @booking.CreationDate.ToString("f")<br />
                                <strong>Departure Price:</strong> @booking.DeparturePriceAtCreation.ToString("N2") DKK<br />
                                <strong>Return Price:</strong> @booking.ReturnPriceAtCreation.ToString("N2") DKK<br />
                                <strong>Hotel Price:</strong> @booking.HotelPriceAtCreation.ToString("N2") DKK<br />
                            </p>

                            <h5 class="mt-3 text-primary"><strong>Total:</strong> @booking.TotalPrice.ToString("N2") DKK</h5>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p>No bookings found.</p>
    }
    

}



@code {
    private List<Booking>? bookings;


    //Checks whether the user should be redirected to the login page or not, after the page is rendered.
    private bool redirectChecked = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!redirectChecked)
        {
            redirectChecked = true;

            //If the user isn't logged in or does not have the required role, redirect the user to the login page.
            if (!authState.IsLoggedIn)
            {
                navigation.NavigateTo("/login", true);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var email = authState.UserEmail;

        bookings = await db.Bookings
            .Where(b => b.UserEmail == email)
            .OrderByDescending(b => b.CreationDate)
            .ToListAsync();
    }


}
