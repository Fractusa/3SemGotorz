@page "/userPage"
@rendermode InteractiveServer
@using Services
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthStateService authState
@inject NavigationManager navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@implements IDisposable

<h3>UserPage</h3>

@if (authState.IsLoggedIn)
{
    <p>Welcome @authState.UserEmail</p>
    <button @onclick=BookPackageRedirect>Book Travel Package</button>
    <button @onclick=MessageInboxRedirect>Message Inbox</button>
    <button @onclick=OrderHistoryRedirect>Order history</button>
    <button @onclick=ChangePasswordRedirect>Change password</button>
    <button @onclick="PerformLogout">Logout</button>

}
else
{
    <p>You are not logged in</p>
}

@if (authState.IsLoggedIn && authState.UserRole == "Employee")
{
    <p>@authState.UserRole</p>
    <button @onclick=EmployeePanelRedirect>Employee panel</button>
}
else if (authState.IsLoggedIn && authState.UserRole == "Admin")
{
    <p>@authState.UserRole</p>
    <button @onclick=EmployeePanelRedirect>Employee panel</button>
    <button @onclick=AdminPanelRedirect>Admin panel</button>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        authState.OnChange += HandleAuthStateChanged;
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            if (!authState.IsLoggedIn || authState.UserEmail != user.Identity.Name)
            {
                var email = user.FindFirst(ClaimTypes.Name)?.Value;
                var role = user.FindFirst(ClaimTypes.Role)?.Value;
                if (!string.IsNullOrEmpty(email) && !string.IsNullOrEmpty(role))
                {
                    authState.Login(email, role);
                }
                else
                {
                    if (authState.IsLoggedIn) authState.Logout();
                }
            }
        }
        else
        {
            if (authState.IsLoggedIn)
            {
                authState.Logout();
            }
        }
    }

    private async void HandleAuthStateChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    //When the page is closed or redirected away from, this method unsubscribes the page from the OnChange event.
    public void Dispose()
    {
        authState.OnChange -= HandleAuthStateChanged;
    }

    private void PerformLogout()
    {
        // Clear your client-side AuthStateService immediately for a responsive UI
        // before the full navigation.
        if (authState.IsLoggedIn)
        {
            authState.Logout();
        }

        // Navigate to the server-side logout endpoint.
        // forceLoad: true ensures it's a full browser navigation, not Blazor's internal routing.
        navigation.NavigateTo("/account/logout", forceLoad: true);
    }

    private void AdminPanelRedirect()
    {
        navigation.NavigateTo("/admin");
    }

    private void EmployeePanelRedirect()
    {
        navigation.NavigateTo("/employee");
    }
    private void MessageInboxRedirect()
    {
        navigation.NavigateTo("/messageInbox");
    }
    private void ChangePasswordRedirect()
    {
        navigation.NavigateTo("/change-password");
    }
    private void OrderHistoryRedirect()
    {
        navigation.NavigateTo("/order-history");
    }
    private void BookPackageRedirect()
    {
        navigation.NavigateTo("/bookPackage");
    }
}
