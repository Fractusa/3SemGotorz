@page "/userPage"
@rendermode InteractiveServer
@using Services
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthStateService authState
@inject NavigationManager navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@implements IDisposable

<div class="app-container">
    <header class="header">
        <img src="/images/gotorz-icon-blue.png" alt="Gotorz Logo" class="top-left-image">
        <button class="logout-button" @onclick="PerformLogout">Logout</button>
    </header>
    <div class="main-content">
        @if (authState.IsLoggedIn)
        {
            <div class="welcome-box">
                <p>Welcome!</p>
                <p>@authState.UserEmail</p>
            </div>
            <div class="grid-container">
                <button class="grid-item" @onclick="BookPackageRedirect">
                    <img src="images/package-icon.png" alt="Travel Package Icon" />
                    <span>Travel Packages</span>
                </button>
                <button class="grid-item" @onclick="MessageInboxRedirect">
                    <img src="images/messages-icon.png" alt="Messages Icon" />
                    <span>Messages</span>
                </button>
                <button class="grid-item" @onclick="OrderHistoryRedirect">
                    <img src="images/orders-icon.png" alt="Orders Icon" />
                    <span>Orders</span>
                </button>
                <button class="grid-item" @onclick="ChangePasswordRedirect">
                    <img src="images/change-password-icon.png" alt="Change Password Icon" />
                    <span>Change Password</span>
                </button>
                @if (authState.UserRole == "Employee" || authState.UserRole == "Admin")
                {
                    <button class="grid-item" @onclick="EmployeePanelRedirect">
                        <img src="images/employee-icon.png" alt="Employee Panel Icon" />
                        <span>Employee Panel</span>
                    </button>
                }
                @if (authState.UserRole == "Admin")
                {
                    <button class="grid-item" @onclick="AdminPanelRedirect">
                        <img src="images/admin-icon.png" alt="Admin Panel Icon" />
                        <span>Admin Panel</span>
                    </button>
                }
            </div>
        }
        else
        {
            <p>You are not logged in</p>
        }
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        authState.OnChange += HandleAuthStateChanged;
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            if (!authState.IsLoggedIn || authState.UserEmail != user.Identity.Name)
            {
                var email = user.FindFirst(ClaimTypes.Name)?.Value;
                var role = user.FindFirst(ClaimTypes.Role)?.Value;
                if (!string.IsNullOrEmpty(email) && !string.IsNullOrEmpty(role))
                {
                    authState.Login(email, role);
                }
                else
                {
                    if (authState.IsLoggedIn) authState.Logout();
                }
            }
        }
        else
        {
            if (authState.IsLoggedIn)
            {
                authState.Logout();
            }
        }
    }

    private async void HandleAuthStateChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        authState.OnChange -= HandleAuthStateChanged;
    }

    private void PerformLogout()
    {
        if (authState.IsLoggedIn)
        {
            authState.Logout();
        }
        navigation.NavigateTo("/account/logout", forceLoad: true);
    }

    private void AdminPanelRedirect()
    {
        navigation.NavigateTo("/admin");
    }

    private void EmployeePanelRedirect()
    {
        navigation.NavigateTo("/employee");
    }

    private void MessageInboxRedirect()
    {
        navigation.NavigateTo("/messageInbox");
    }

    private void ChangePasswordRedirect()
    {
        navigation.NavigateTo("/change-password");
    }

    private void OrderHistoryRedirect()
    {
        navigation.NavigateTo("/order-history");
    }

    private void BookPackageRedirect()
    {
        navigation.NavigateTo("/bookPackage");
    }
}
