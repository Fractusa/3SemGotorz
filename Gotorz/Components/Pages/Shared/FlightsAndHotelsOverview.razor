@page "/bookPackage"
@rendermode InteractiveServer
@using Gotorz.Models
@using Gotorz.Services
@using Gotorz.Data
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext db
@inject TravelAPIService travelAPI
@inject AuthStateService authState
@inject NavigationManager navigation


<h3>Search by Origin and Destination</h3>

<EditForm Model="@locationModel" OnValidSubmit="HandleLocationSearch">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group mb-2">
        <label>Origin Airport Code:</label>
        <InputText class="form-control" @bind-Value="locationModel.Origin" />
    </div>

    <div class="form-group mb-2">
        <label>Destination Airport Code:</label>
        <InputText class="form-control" @bind-Value="locationModel.Destination" />
    </div>

    <button type="submit" class="btn btn-primary">Search Templates</button>
</EditForm>
<button @onclick=UserPageRedirect>Back</button>


@if (templates.Any())
{
    <InputRadioGroup @bind-Value="selectedTemplateId">
        @foreach (var template in templates)
        {
            <div class="form-check mb-2">
                <InputRadio class="form-check-input" Value="@template.Id" />
                <label class="form-check-label">
                    <strong>@template.Title</strong>: @template.Description<br />
                    From @template.Origin to @template.Destination - Hotel: @template.Hotel?.HotelName
                </label>
            </div>
        }
    </InputRadioGroup>
    <button class="btn btn-primary mb-4" @onclick="ConfirmTemplate">Select Template</button>
}

@if(selectedTemplate != null)
{
    <hr />
    <h3>Step 3: Enter Travel Dates and Passengers</h3>
    <EditForm Model="@flightModel" OnValidSubmit="HandleFlightSearch">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-2">
            <label>Departure Date:</label>
            <InputDate class="form-control" @bind-Value="flightModel.DepartureTime" />
        </div>

        <div class="form-group mb-2">
            <label>Return Date:</label>
            <InputDate class="form-control" @bind-Value="flightModel.ReturnTime" />
        </div>

        <div class="form-group mb-2">
            <label>Adults:</label>
            <InputNumber class="form-control" @bind-Value="flightModel.Adults" />
        </div>

        <button type="submit" class="btn btn-primary">Search Availability</button>
    </EditForm>
}


@if (DepartureFlights.Any() && ReturnFlights.Any() && selectedTemplate?.Hotel != null)
{
    <hr />
    <h4>Departure Flights</h4>
    <InputRadioGroup Value="@selectedDepartureFlightId"
    ValueChanged="@((string newValue) => OnDepartureFlightSelectionChanged(newValue))"
    ValueExpression="() => selectedDepartureFlightId">
        @foreach (var flight in DepartureFlights)
        {
            <div class="form-check">
                <InputRadio class="form-check-input" Value="@flight.FlightId" />
                <label class="form-check-label">
                    @flight.DepartureAirport → @flight.ArrivalAirport<br />
                    Departure: @flight.DepartureTime.ToString("yyyy-MM-dd HH:mm")<br />
                    Arrival: @flight.ArrivalTime.ToString("yyyy-MM-dd HH:mm")<br />
                    Price: @flight.Price.ToString("N2") DKK
                </label>
            </div>
        }
    </InputRadioGroup>

    <h4>Departure Flights</h4>
    <InputRadioGroup Value="@selectedReturnFlightId"
    ValueChanged="@((string newValue) => OnReturnFlightSelectionChanged(newValue))"
    ValueExpression="() => selectedReturnFlightId">
        @foreach (var flight in DepartureFlights)
        {
            <div class="form-check">
                <InputRadio class="form-check-input" Value="@flight.FlightId" />
                <label class="form-check-label">
                    @flight.DepartureAirport → @flight.ArrivalAirport<br />
                    Departure: @flight.DepartureTime.ToString("yyyy-MM-dd HH:mm")<br />
                    Arrival: @flight.ArrivalTime.ToString("yyyy-MM-dd HH:mm")<br />
                    Price: @flight.Price.ToString("N2") DKK
                </label>
            </div>
        }
    </InputRadioGroup>

    <h4>Hotel</h4>
    @if (selectedTemplate?.Hotel != null)
    {
        <div class="card mb-3" style="max-width: 600px;">
            <div class="card-body">
                <h5 class="card-title">@selectedTemplate.Hotel.HotelName</h5>
                <p class="card-text">
                    Price for selected dates: <strong>@selectedTemplate.Hotel.Price.ToString("N2") DKK</strong>
                </p>
            </div>
        </div>
    }

    @if (totalPackagePrice.HasValue)
    {
        <div class="alert alert-info mt-3">
            <strong>Total Package Price:</strong> @totalPackagePrice.Value.ToString("N2") DKK<br />
            <strong>Per Adult:</strong> @((totalPackagePrice.Value / flightModel.Adults).ToString("N2")) DKK
        </div>
    }

    <button class="btn btn-success mt-3" @onclick="CreateBooking">Create Booking</button>
}



@if (bookings.Any())
{
    <hr />
    <h4>Booking</h4>
    <ul>
        @foreach (var booking in bookings)
        {
            <li>
                User: @booking.UserEmail
                Creation Date: @booking.CreationDate.ToShortDateString() |
                From: @booking.Origin → @booking.Destination |
                Depart Flight Takeoff: @booking.TakeoffTimeDepartureFlight.ToShortDateString() |
                Depart Flight Landing: @booking.LandingTimeDepartureFlight.ToShortDateString() |
                Return Flight Takeoff: @booking.TakeoffTimeReturnFlight.ToShortDateString() |
                Return Flight Landing: @booking.LandingTimeReturnFlight.ToShortDateString() |
                Hotel: @booking.HotelName |
                Hotel CheckIn: @booking.HotelCheckIn |
                Hotel CheckOut: @booking.HotelCheckOut |
                Adults: @booking.Adults |
                Total: @booking.TotalPrice.ToString("N2") DKK
            </li>
        }
    </ul>
}

@code {

    private int selectedTemplateId;
    private string selectedDepartureFlightId;
    private string selectedReturnFlightId;
    private decimal? totalPackagePrice;

    private TravelPackageTemplate? selectedTemplate;
    private LocationModel locationModel = new();
    private FlightModel flightModel = new();

    private List<FlightData> DepartureFlights = new();
    private List<FlightData> ReturnFlights = new();
    private List<TravelPackageTemplate> templates = new();
    private List<Booking> bookings = new();


    private void UserPageRedirect()
    {
        navigation.NavigateTo("/userPage");
    }

    private void ConfirmTemplate()
    {
        selectedTemplate = templates.FirstOrDefault(t => t.Id == selectedTemplateId);
    }

    private async Task HandleLocationSearch()
    {
        templates = await db.TravelPackageTemplates
        .Where(t => t.Origin == locationModel.Origin && t.Destination == locationModel.Destination)
        .ToListAsync();

        foreach(var t in templates)
        {
            var hotels = await travelAPI.GetHotelsAsync(t.Destination, DateTime.Today.ToString("yyyy-MM-dd"), DateTime.Today.AddDays(7).ToString("yyyy-MM-dd"), 1);
            t.Hotel = hotels.FirstOrDefault(h => h.HotelId == t.HotelId);
        }

        selectedTemplate = null;
    }


    private async Task HandleFlightSearch()
    {
        if(selectedTemplate == null)
            return;


        DepartureFlights = await travelAPI.GetFlightsAsync(
            selectedTemplate.Origin, selectedTemplate.Destination, flightModel.DepartureTime.ToString("yyyy-MM-dd"), flightModel.Adults);

        ReturnFlights = await travelAPI.GetFlightsAsync(
            selectedTemplate.Destination, selectedTemplate.Origin, flightModel.ReturnTime.ToString("yyyy-MM-dd"), flightModel.Adults);

        var hotelOptions = await travelAPI.GetHotelsAsync(
        selectedTemplate.Destination,
        flightModel.DepartureTime.ToString("yyyy-MM-dd"),
        flightModel.ReturnTime.ToString("yyyy-MM-dd"),
        flightModel.Adults);

        selectedTemplate.Hotel = hotelOptions.FirstOrDefault(h => h.HotelId == selectedTemplate.HotelId);

        var departure = DepartureFlights.FirstOrDefault();
        var ret = ReturnFlights.FirstOrDefault();
        var hotel = selectedTemplate.Hotel;

        if (departure != null && ret != null && hotel != null)
        {
            totalPackagePrice = departure.Price + ret.Price + hotel.Price;
        }
        else
        {
            totalPackagePrice = null;
        }
    }

    private async Task CreateBooking()
    {
        var userEmail = authState.UserEmail;
        var departureFlight = DepartureFlights.FirstOrDefault(f => f.FlightId == selectedDepartureFlightId);
        var returnFlight = ReturnFlights.FirstOrDefault(f => f.FlightId == selectedReturnFlightId);
        var hotel = selectedTemplate.Hotel;

        if (departureFlight != null && returnFlight != null && hotel != null && selectedTemplate != null)
        {
            var total = departureFlight.Price + returnFlight.Price + hotel.Price;

            var newBooking = new Booking
                {
                    DepartureFlightId = departureFlight.FlightId,
                    ReturnFlightId = returnFlight.FlightId,
                    HotelId = hotel.HotelId,
                    HotelName = hotel.HotelName,
                    HotelCheckIn = departureFlight.ArrivalTime,
                    HotelCheckOut = returnFlight.DepartureTime,
                    UserEmail = userEmail,
                    DeparturePriceAtCreation = departureFlight.Price,
                    ReturnPriceAtCreation = returnFlight.Price,
                    HotelPriceAtCreation = hotel.Price,
                    TotalPrice = total,
                    Origin = selectedTemplate.Origin,
                    Destination = selectedTemplate.Destination,
                    TakeoffTimeDepartureFlight = departureFlight.DepartureTime,
                    LandingTimeDepartureFlight = departureFlight.ArrivalTime,
                    TakeoffTimeReturnFlight = returnFlight.DepartureTime,
                    LandingTimeReturnFlight = returnFlight.ArrivalTime,
                    Adults = flightModel.Adults,
                    CreationDate = DateTime.UtcNow
                };

            db.Bookings.Add(newBooking);
            await db.SaveChangesAsync();

            bookings.Add(newBooking);
        }
    }
    private void CalculateTotalPackagePrice(ChangeEventArgs? e = null)
    {
        var departure = DepartureFlights.FirstOrDefault(f => f.FlightId == selectedDepartureFlightId);
        var ret = ReturnFlights.FirstOrDefault(f => f.FlightId == selectedReturnFlightId);
        var hotel = selectedTemplate?.Hotel;

        if (departure != null && ret != null && hotel != null)
        {
            totalPackagePrice = departure.Price + ret.Price + hotel.Price;
        }
        else
        {
            totalPackagePrice = null;
        }
    }
    private Task OnDepartureFlightSelectionChanged(string newValue)
    {
        selectedDepartureFlightId = newValue;
        CalculateTotalPackagePrice();
        return Task.CompletedTask;
    }
    private Task OnReturnFlightSelectionChanged(string newValue)
    {
        selectedReturnFlightId = newValue;
        CalculateTotalPackagePrice();
        return Task.CompletedTask;
    }

    public class LocationModel
    {
        [Required]
        public string Origin { get; set; } = string.Empty;

        [Required]
        public string Destination { get; set; } = string.Empty;
    }

    public class FlightModel
    {
        [Required]
        public DateTime DepartureTime { get; set; } = DateTime.Today.AddDays(10);

        [Required]
        public DateTime ReturnTime { get; set; } = DateTime.Today.AddDays(17);


        [Range(1, 5)]
        public int Adults { get; set; } = 1;
    }
}
