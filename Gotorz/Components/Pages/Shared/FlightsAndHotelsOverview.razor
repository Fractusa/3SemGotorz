@using Gotorz.Models
@using Gotorz.Services
@using Gotorz.Data
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@rendermode InteractiveServer
@inject ApplicationDbContext db

@page "/flightsandhotels"
@inject TravelAPIService travelAPI

<h3 class="mb-3">Search Flights and Hotels</h3>

<EditForm Model="@searchModel" OnValidSubmit="HandleSearch">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-2">
        <label>Origin Airport Code:</label>
        <InputText class="form-control" @bind-Value="searchModel.Origin" />
    </div>

    <div class="form-group mb-2">
        <label>Destination Airport Code:</label>
        <InputText class="form-control" @bind-Value="searchModel.Destination" />
    </div>

    <div class="form-group mb-2">
        <label>Departure Date:</label>
        <InputDate class="form-control" @bind-Value="searchModel.DepartureDate" />
    </div>

    <div class="form-group mb-2">
        <label>Return Date:</label>
        <InputDate class="form-control" @bind-Value="searchModel.ReturnDate" />
    </div>

    <div class="form-group mb-2">
        <label>Adults:</label>
        <InputNumber class="form-control" @bind-Value="searchModel.Adults" />
    </div>

    <button type="submit" class="btn btn-primary">Search</button>
</EditForm>

<hr />

<h4>Departure Flights</h4>
<InputRadioGroup @bind-Value="selectedDepartureFlightId">
    @foreach (var flight in DepartureFlights)
    {
        <div class="form-check">
            <InputRadio class="form-check-input" Value="@flight.FlightId" />
            <label class="form-check-label">
                @flight.DepartureAirport → @flight.ArrivalAirport - @flight.Price DKK
            </label>
        </div>
    }
</InputRadioGroup>

<h4>Return Flights</h4>
<InputRadioGroup @bind-Value="selectedReturnFlightId">
    @foreach (var flight in ReturnFlights)
    {
        <div class="form-check">
            <InputRadio class="form-check-input" Value="@flight.FlightId" />
            <label class="form-check-label">
                @flight.DepartureAirport → @flight.ArrivalAirport - @flight.Price DKK
            </label>
        </div>
    }
</InputRadioGroup>

<h4>Hotels</h4>
<InputRadioGroup @bind-Value="selectedHotelId">
    @foreach (var hotel in Hotels)
    {
        <div class="form-check">
            <InputRadio class="form-check-input" Value="@hotel.HotelId" />
            <label class="form-check-label">
                @hotel.HotelName - @hotel.Price DKK
            </label>
        </div>
    }
</InputRadioGroup>

@if (!string.IsNullOrEmpty(selectedDepartureFlightId) &&
   !string.IsNullOrEmpty(selectedReturnFlightId) &&
   !string.IsNullOrEmpty(selectedHotelId))
{
    <hr />
    <h4>Your Travel Package</h4>
    <p>
        Selected Departure Flight ID: @selectedDepartureFlightId<br />
        Selected Return Flight ID: @selectedReturnFlightId<br />
        Selected Hotel ID: @selectedHotelId
    </p>
    <button class="btn btn-success" @onclick="CreateTravelPackage">Create Package</button>
}

@if (travelPackages.Any())
{
    <hr />
    <h4>Booked Packages</h4>
    <ul>
        @foreach (var p in travelPackages)
        {
            <li>
                Booking Date: @p.BookingDate.ToShortDateString() |
                From: @p.Origin → @p.Destination |
                Depart: @p.DepartureDate.ToShortDateString() |
                Return: @p.ReturnDate.ToShortDateString() |
                Adults: @p.Adults |
                Total: @p.TotalPrice DKK
            </li>
        }
    </ul>
}

@code {
    private string selectedDepartureFlightId;
    private string selectedReturnFlightId;
    private string selectedHotelId;

    private List<TravelPackage> travelPackages = new();

    private SearchModel searchModel = new()
        {
            Origin = "CPH",
            Destination = "LON",
            DepartureDate = DateTime.Today.AddDays(10),
            ReturnDate = DateTime.Today.AddDays(17),
            Adults = 1
        };

    private List<FlightData> DepartureFlights = new();
    private List<FlightData> ReturnFlights = new();
    private List<HotelData> Hotels = new();

    private async Task HandleSearch()
    {
        DepartureFlights = await travelAPI.GetFlightsAsync(
            searchModel.Origin, searchModel.Destination, searchModel.DepartureDate.ToString("yyyy-MM-dd"), searchModel.Adults);

        ReturnFlights = await travelAPI.GetFlightsAsync(
            searchModel.Destination, searchModel.Origin, searchModel.ReturnDate.ToString("yyyy-MM-dd"), searchModel.Adults);

        Hotels = await travelAPI.GetHotelsAsync(
            searchModel.Destination, searchModel.DepartureDate.ToString("yyyy-MM-dd"),
            searchModel.ReturnDate.ToString("yyyy-MM-dd"), searchModel.Adults);
    }

    private async Task CreateTravelPackage()
    {
        if (string.IsNullOrEmpty(selectedDepartureFlightId) ||
            string.IsNullOrEmpty(selectedReturnFlightId) ||
            string.IsNullOrEmpty(selectedHotelId))
        {
            return;
        }

        var departureFlight = DepartureFlights.FirstOrDefault(f => f.FlightId == selectedDepartureFlightId);
        var returnFlight = ReturnFlights.FirstOrDefault(f => f.FlightId == selectedReturnFlightId);
        var hotel = Hotels.FirstOrDefault(h => h.HotelId == selectedHotelId);

        if (departureFlight != null && returnFlight != null && hotel != null)
        {
            var newPackage = new TravelPackage
                {
                    DepartureFlightId = departureFlight.FlightId,
                    ReturnFlightId = returnFlight.FlightId,
                    HotelId = hotel.HotelId,
                    DeparturePriceAtBooking = departureFlight.Price,
                    ReturnPriceAtBooking = returnFlight.Price,
                    HotelPriceAtBooking = hotel.Price,
                    Origin = searchModel.Origin,
                    Destination = searchModel.Destination,
                    DepartureDate = searchModel.DepartureDate,
                    ReturnDate = searchModel.ReturnDate,
                    Adults = searchModel.Adults,
                    BookingDate = DateTime.UtcNow
                };

            db.TravelPackages.Add(newPackage);
            await db.SaveChangesAsync();

            travelPackages.Add(newPackage);
        }
    }

    public class SearchModel
    {
        [Required]
        public string Origin { get; set; }

        [Required]
        public string Destination { get; set; }

        [Required]
        public DateTime DepartureDate { get; set; }

        [Required]
        public DateTime ReturnDate { get; set; }

        [Range(1, 5)]
        public int Adults { get; set; }
    }
}
